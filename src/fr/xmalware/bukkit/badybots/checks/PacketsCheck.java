package fr.xmalware.bukkit.badybots.checks;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.bukkit.Bukkit;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer;
import org.bukkit.entity.Player;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerLoginEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import fr.xmalware.bukkit.badybots.BadyBots;
import fr.xmalware.bukkit.badybots.checks.abstracts.Check;
import fr.xmalware.bukkit.badybots.checks.abstracts.CheckResponse;
import fr.xmalware.bukkit.badybots.checks.abstracts.CheckType;
import fr.xmalware.bukkit.badybots.utils.TempTask;
import io.netty.channel.Channel;
import io.netty.channel.ChannelDuplexHandler;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelPipeline;
import net.minecraft.server.v1_8_R3.EntityPlayer;
import net.minecraft.server.v1_8_R3.PacketPlayInKeepAlive;
import net.minecraft.server.v1_8_R3.PacketPlayOutKeepAlive;

public class PacketsCheck extends Check {

	private Map<String, Integer> logs = new HashMap<>();
	private Map<String, Long> violations = new HashMap<>();
	private Map<String, ChannelPipeline> pipelines = new HashMap<>();

	public PacketsCheck() {
		super(CheckType.PACKETS_CHECK);
	}

	@Override
	public CheckResponse onLogin(PlayerLoginEvent event) {
		return CheckResponse.ALLOW;
	}

	@Override
	public CheckResponse onJoin(PlayerJoinEvent event) {
		final TempTask task = new TempTask();
		Player player = event.getPlayer();
		final EntityPlayer ent = ((CraftPlayer)player).getHandle();
		if (ent == null) {
			return CheckResponse.KICK;
		}
		Channel channel = ent.playerConnection.networkManager.channel;
		if (channel == null) {
			return CheckResponse.KICK;
		}
		task.task = Bukkit.getServer().getScheduler().scheduleSyncRepeatingTask(BadyBots.instance, new Runnable()
		{
			public void run()
			{
				if ((player == null) || (!player.isOnline()))
				{
					BadyBots.instance.getServer().getScheduler().cancelTask(task.task);
					return;
				}
				int id = new Random().nextInt(2147483645) + 1;
				PacketPlayOutKeepAlive keepAlive = new PacketPlayOutKeepAlive(id);
				ent.playerConnection.sendPacket(keepAlive);
			}
		}, 0L, 1L);
		pipelines.put(player.getName(), channel.pipeline().addBefore("packet_handler", "badybots", new ChannelDuplexHandler()
		{
			public void channelRead(ChannelHandlerContext ctx, Object msg)
					throws Exception
			{
				if ((player == null) || (!player.isOnline())) {
					return;
				}
				if ((msg instanceof PacketPlayInKeepAlive))
				{
					PacketPlayInKeepAlive packet = (PacketPlayInKeepAlive)msg;
					if (logs.containsKey(player.getName()))
					{
						int a = logs.get(player.getName());
						if (a == packet.a()) {
							BadyBots.instance.getServer().getScheduler().runTask(BadyBots.instance, new Runnable()
							{
								public void run()
								{
									if (player == null || (!player.isOnline())) {
										return;
									}
									long i = !violations.containsKey(player.getName()) ? 1L : violations.get(player.getName()) + 1;
									violations.put(player.getName(), i);
									if (i >= 20L) {
										BadyBots.work(player, getCheckType(), CheckResponse.BAN);
									}
								}
							});
						} else if (violations.containsKey(player.getName())) {
							if (violations.get(player.getName()) > 0) {
								violations.put(player.getName(), violations.get(player.getName()) - 1L);
							}
						}
					}
					logs.put(player.getName(), packet.a());
				}
				super.channelRead(ctx, msg);
			}
		}));
		return CheckResponse.ALLOW;
	}

	@Override
	public void onPlayerQuit(PlayerQuitEvent event) {
		if (pipelines.containsKey(event.getPlayer().getName())) {
			pipelines.get(event.getPlayer().getName()).close();
		}
	}

	@Override
	public CheckResponse onCommandPreprocess(PlayerCommandPreprocessEvent event) {
		return CheckResponse.ALLOW;
	}

}
