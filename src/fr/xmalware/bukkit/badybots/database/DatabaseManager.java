package fr.xmalware.bukkit.badybots.database;

import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Queue;

import org.bukkit.Bukkit;

import com.google.common.collect.Queues;

public class DatabaseManager {

	public static Thread threadUpdate;
	public static Thread threadQuery;
	public static Queue<String> updateRequests = Queues.newLinkedBlockingDeque();
	public static Queue<QueryRequest> queryRequests = Queues.newLinkedBlockingDeque();

	public DatabaseManager() {
		Bukkit.getConsoleSender().sendMessage("Â§dLoading database...");
		threadUpdate = new Thread("guardian_update") {
			@SuppressWarnings("deprecation")
			@Override
			public void run() {
				synchronized (threadUpdate) {
					while (true) {
						if (!updateRequests.isEmpty()) {
							String query = updateRequests.poll();
							if (!query.equals("")) {
								BadblockDatabase dbInstance = BadblockDatabase.getInstance();
								try {
									if (dbInstance.isConnected() && dbInstance.isConnectionEtablished()) {
										Statement statement = dbInstance.createStatement();
										statement.executeUpdate(query);
										statement.close();
									}
								} catch (Exception error) {
									error.printStackTrace();
								}
							}
						}
						try {
							threadUpdate.wait();
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			}
		};
		threadUpdate.start();
		threadQuery = new Thread("guardian_query") {
			@SuppressWarnings("deprecation")
			@Override
			public void run() {
				synchronized (threadQuery) {
					while (true) {
						if (!queryRequests.isEmpty()) {
							QueryRequest query = queryRequests.poll();
							if (query != null) {
								BadblockDatabase dbInstance = BadblockDatabase.getInstance();
								try {
									if (dbInstance.isConnected() && dbInstance.isConnectionEtablished()) {
										Statement statement = dbInstance.createStatement();
										query.done(statement.executeQuery(query.getRequest()));
										statement.close();
									}
								} catch (Exception error) {
									error.printStackTrace();
								}
							}
						}
						try {
							threadQuery.wait();
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			}
		};
		threadQuery.start();
	}

	public static void sendQuery(String message) {
		updateRequests.add(message);
		synchronized (threadUpdate) {
			threadUpdate.notify();
		}
	}
	
	public static ResultSet syncQuery(String message) throws Exception {
		BadblockDatabase dbInstance = BadblockDatabase.getInstance();
		Statement statement = dbInstance.createStatement();
		return statement.executeQuery(message);
	}
	
	public static void asyncQuery(QueryRequest queryRequest) throws Exception {
		queryRequests.add(queryRequest);
		synchronized (threadQuery) {
			threadQuery.notify();
		}
	}

	public static String secure(java.sql.Connection link, String str) throws Exception {
		if (str == null) {
			return null;
		}

		if (str.replaceAll("[a-zA-Z0-9_!@#$%^&*()-=+~.;:,\\Q[\\E\\Q]\\E<>{}\\/? ]", "").length() < 1) {
			return str;
		}

		String clean_string = str;
		clean_string = clean_string.replaceAll("\\\\", "\\\\\\\\");
		clean_string = clean_string.replaceAll("\\n", "\\\\n");
		clean_string = clean_string.replaceAll("\\r", "\\\\r");
		clean_string = clean_string.replaceAll("\\t", "\\\\t");
		clean_string = clean_string.replaceAll("\\00", "\\\\0");
		clean_string = clean_string.replaceAll("'", "\\\\'");
		clean_string = clean_string.replaceAll("\\\"", "\\\\\"");

		if (clean_string.replaceAll("[a-zA-Z0-9_!@#$%^&*()-=+~.;:,\\Q[\\E\\Q]\\E<>{}\\/?\\\\\"' ]", "").length() < 1) {
			return clean_string;
		}

		java.sql.Statement stmt = link.createStatement();
		String qry = "SELECT QUOTE('" + clean_string + "')";

		stmt.executeQuery(qry);
		java.sql.ResultSet resultSet = stmt.getResultSet();
		resultSet.first();
		String r = resultSet.getString(1);
		return r.substring(1, r.length() - 1);
	}

	public static void load() {
	}

}
